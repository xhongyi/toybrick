RELEVANT FILES:
    ./introCUDA_injection_taylor_shift.cu
    ../experiments/test_gpu_shift.py
    ../experiments/generator.py


DESCRIPTION OF introCUDA_injection_taylor_shift.cu:
    This is the CUDA code. A description of how to run it is located below. You
    might rather be interested in using our test_gpu_shift.py script instead
    of the CUDA code directly.

    
DESCRIPTION OF test_gpu_shift.py:
    This is the code we used to generate all of our data for our reports. How to
    use it is listed below.


DESCRIPTION OF generator.py:
    This script will generate two files. One file contains a bunch of reads, and
    the other file contains those same reads with a given amounts of edits. How
    use it is listed below.


TO COMPILE:
    nvcc introCUDA_injection_taylor_shift.cu -o inj_taylor_shift.out


TO RUN THE CUDA CODE:
    ./introCUDA_injection_taylor_shift.cu <read_file_1> <read_file_2> <# of reads in each file> <length of each read> <# of edits allowed> <vicinity of bit flips> <maximum shift amount when comparing two reads>

    For example:
    ./inj_taylor_shift.out read1.txt read1_edit.txt 1000 80 3 3 3

    How this works is explained in the code, but at the end it writes how many 
    read comparisons passed and failed to a file.

    ****NOTE: if you want to use a shift amount greater than 5, you will need to
              change a #define in the source code.


TO RUN THE test_gpu_shift.py SCRIPT:
    ./test_gpu_shift.py <# tests> <# reads/test> <read length> <# edits> <# edits allowed> <vicinity size> <max shift length>

    For example:
    ./test_gpu_shift.py 100 1000 80 1 3 1 3

    This run would consist of 100 tests of 1000 pairs of reads (one is the
    edited version of the other). Each read would be of length 80. The number
    of edits made between one read and the read it's compared to is 1, but
    the maximum number allowed is 3 (so all of these should pass). All of these
    pairs of reads are generated automatically by the generator.py script. The 
    size of the vicinity for the bit-flipping is 1 (i.e., it doesn't check for 
    it). The maximum about of shifting when comparing two reads is 3 (i.e., it 
    XORs the reads without shifting, then shifts one read by 1, then 2, then 3,
    XORing each time, etc.).
    
    In the end this script will spit out the percentage of false positives and
    false negatives produced by the given set parameters.


TO RUN THE generator.py SCRIPT:
    ./generator.py <file name w/o edits> <file name w/ edits> <number of reads> <length of each read> <number of actual edits b/w reads in each file>

    For example:
    ./generator.py reads.txt edited_reads.txt 1000 80 3

    This script run would generate two files reads.txt and edited_reads.txt.
    Each file contains 1000 reads of legnth 80. However, edited_reads.txt
    contains reads which differ by 3 edits from their corresponding reads in
    the other file.


